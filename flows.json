[
    {
        "id": "c86eb73a2941d666",
        "type": "tab",
        "label": "EdgeComputingFlow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f20d4b2721bc1e09",
        "type": "subflow",
        "name": "Read Data File",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "1b26083b424b6925"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 80,
                "wires": [
                    {
                        "id": "0be3d2774909f3d7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d7e86ab1dbf38c0c",
        "type": "subflow",
        "name": "Write Data to File",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "74224315ff6ba594"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6bde268a23e17faf",
        "type": "subflow",
        "name": "DataPreprocessing",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 260,
                "wires": [
                    {
                        "id": "de565ad94fac0180"
                    },
                    {
                        "id": "f973fa1eb70a3c3a"
                    },
                    {
                        "id": "d11af3a872894da9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 260,
                "wires": [
                    {
                        "id": "2d04c50b051532d9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "51cab0923b3cdfd1",
        "type": "subflow",
        "name": "TemperatureMLModel",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 180,
                "wires": [
                    {
                        "id": "66c9f844d6ad1f1f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 180,
                "wires": [
                    {
                        "id": "8b19aacb63a6a5b6",
                        "port": 0
                    },
                    {
                        "id": "a02a3cb506b1ac53",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ad8135a6624fbd19",
        "type": "subflow",
        "name": "PressureMLModel",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 260,
                "wires": [
                    {
                        "id": "42b87ca37fa29888"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 260,
                "wires": [
                    {
                        "id": "f332113a57ebb977",
                        "port": 0
                    },
                    {
                        "id": "5d7daa29cf131bbe",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "02f2c978721b1b05",
        "type": "subflow",
        "name": "HumidityMLModel",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 280,
                "wires": [
                    {
                        "id": "188a72dffbefc133"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 260,
                "wires": [
                    {
                        "id": "78c8932883973835",
                        "port": 0
                    },
                    {
                        "id": "6661cc1f8b583ed4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6282415b8a339d0d",
        "type": "subflow",
        "name": "findMinMax",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 200,
                "wires": [
                    {
                        "id": "8dca42bdf74c7c6a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 200,
                "wires": [
                    {
                        "id": "8dca42bdf74c7c6a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "97c34c3cf3ec4a93",
        "type": "subflow",
        "name": "NormalizeValue",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 300,
                "y": 260,
                "wires": [
                    {
                        "id": "1ef48e35c504b6c4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 260,
                "wires": [
                    {
                        "id": "1ef48e35c504b6c4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ea34a77b88c038b0",
        "type": "subflow",
        "name": "WebService",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "cccc81e815b36428",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [],
        "out": []
    },
    {
        "id": "3eea6da9acd67980",
        "type": "subflow",
        "name": "LogisticRegressionModel",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 360,
                "wires": [
                    {
                        "id": "01f409f9b65871fc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 920,
                "y": 300,
                "wires": [
                    {
                        "id": "0c8845731508ab7e",
                        "port": 0
                    },
                    {
                        "id": "4cb6c2ef85e9559a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b1942cd0e3fb69cc",
        "type": "subflow",
        "name": "ReadFileData",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 220,
                "wires": [
                    {
                        "id": "ef73343f65c5c77f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 220,
                "wires": [
                    {
                        "id": "f7dd62e8ce3bc4e2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "65bb01d7a33d3a8f",
        "type": "subflow",
        "name": "NaiveBayes",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 280,
                "wires": [
                    {
                        "id": "bfb105564acf6b2f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 260,
                "wires": [
                    {
                        "id": "c1d05b1affdb809c",
                        "port": 0
                    },
                    {
                        "id": "f2e0a3707eacf780",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9566982d40e572b6",
        "type": "subflow",
        "name": "DecisionTree",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 20,
                "y": 280,
                "wires": [
                    {
                        "id": "74211aea63b5ff8b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 220,
                "wires": [
                    {
                        "id": "3724bacfe4d54a7e",
                        "port": 0
                    },
                    {
                        "id": "6fad0560c049ae6c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 960,
                "y": 480,
                "wires": [
                    {
                        "id": "b7c88f4bfe45f4b1",
                        "port": 0
                    },
                    {
                        "id": "dbfff2a1f094d40c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b4fdd94459dced40",
        "type": "subflow",
        "name": "RandomForest",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 300,
                "wires": [
                    {
                        "id": "1ed08c96dea9d621"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 660,
                "y": 140,
                "wires": [
                    {
                        "id": "90d9e3a8d0446dfc",
                        "port": 0
                    },
                    {
                        "id": "2683f77aab20990d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 660,
                "y": 420,
                "wires": [
                    {
                        "id": "3c61982af29affa9",
                        "port": 0
                    },
                    {
                        "id": "be2e8afac42cf4ac",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a2f8739eef20117c",
        "type": "subflow",
        "name": "EdgeNode",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 560,
                "wires": [
                    {
                        "id": "9d3695f45eed3411"
                    },
                    {
                        "id": "9b9886ea365515a2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 460,
                "wires": [
                    {
                        "id": "9b9886ea365515a2",
                        "port": 0
                    },
                    {
                        "id": "9b9886ea365515a2",
                        "port": 1
                    },
                    {
                        "id": "9b9886ea365515a2",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a66c82f3cadc8b79",
        "type": "subflow",
        "name": "LoadMLData",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 180,
                "wires": [
                    {
                        "id": "3397414a01bb12a0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 140,
                "wires": [
                    {
                        "id": "239fd604d456a852",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d022eb2b56d54e12",
        "type": "subflow",
        "name": "Inputs",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 160,
                "wires": [
                    {
                        "id": "8908994348a8c6df"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 180,
                "wires": [
                    {
                        "id": "ace854d5c23f4448",
                        "port": 0
                    },
                    {
                        "id": "93ef18d411c368af",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0d48d6ca863e9e31",
        "type": "subflow",
        "name": "MLAlgorithms",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 240,
                "wires": [
                    {
                        "id": "f3c1cd97b8fb5692"
                    },
                    {
                        "id": "fdadfbd956995785"
                    },
                    {
                        "id": "d8f08977542c48ed"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 80,
                "wires": [
                    {
                        "id": "d8f08977542c48ed",
                        "port": 0
                    },
                    {
                        "id": "d8f08977542c48ed",
                        "port": 1
                    }
                ]
            },
            {
                "x": 640,
                "y": 220,
                "wires": [
                    {
                        "id": "fdadfbd956995785",
                        "port": 0
                    },
                    {
                        "id": "fdadfbd956995785",
                        "port": 1
                    }
                ]
            },
            {
                "x": 640,
                "y": 360,
                "wires": [
                    {
                        "id": "f3c1cd97b8fb5692",
                        "port": 0
                    },
                    {
                        "id": "f3c1cd97b8fb5692",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "32374ce96bb10d12",
        "type": "subflow",
        "name": "Display",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 220,
                "wires": [
                    {
                        "id": "2c5e89f451460a09"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "04d97421e9b36a04",
        "type": "subflow",
        "name": "SVM",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 300,
                "wires": [
                    {
                        "id": "5a0e08176fa9da40"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 220,
                "wires": [
                    {
                        "id": "7a0756937716bc19",
                        "port": 0
                    },
                    {
                        "id": "4eb8211bff06b551",
                        "port": 0
                    }
                ]
            },
            {
                "x": 940,
                "y": 400,
                "wires": [
                    {
                        "id": "b1168eeeeeb1d5ce",
                        "port": 0
                    },
                    {
                        "id": "3145f57c6db0606a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "72ef596c746ab62c",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "1a297c36cb8b6a85",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "695a5728f1b1bf19",
        "type": "ui_group",
        "name": "Actions",
        "tab": "1a297c36cb8b6a85",
        "order": 1,
        "disp": true,
        "width": 2,
        "collapse": false,
        "className": ""
    },
    {
        "id": "285a4a1d9a259f1c",
        "type": "ui_group",
        "name": "Predictions",
        "tab": "1a297c36cb8b6a85",
        "order": 5,
        "disp": true,
        "width": 8,
        "collapse": true,
        "className": ""
    },
    {
        "id": "9b65166c46416877",
        "type": "ui_group",
        "z": "32374ce96bb10d12",
        "name": "Data",
        "tab": "1a297c36cb8b6a85",
        "order": 3,
        "disp": true,
        "width": 9,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c5b2afceb578627a",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "9b65166c46416877",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "8b92218a1057c6a6",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "9b65166c46416877",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "432a3084a2f4053c",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "9b65166c46416877",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "d7a704df286b9aba",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "9b65166c46416877",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "fe21996e5bd9e2b8",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "9b65166c46416877",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "6add3ca9278ed9ef",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "9b65166c46416877",
        "order": 9,
        "width": 9,
        "height": 1
    },
    {
        "id": "6c87429db718173b",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "79fbaad5bda949a3",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "c1c222ed91139395",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 8,
        "width": 8,
        "height": 1
    },
    {
        "id": "39193349f853cf6b",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "079fdd3aaea65777",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "05dc0d17ad6eac0b",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "f4b8ecc520fc3297",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 16,
        "width": 2,
        "height": 1
    },
    {
        "id": "0272a67bd2c63b9b",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "eeb3e3cc04e433dd",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "a67452bc66b34b67",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "7b4fb48215126b32",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 24,
        "width": 4,
        "height": 1
    },
    {
        "id": "a323775a3d775279",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 26,
        "width": 1,
        "height": 1
    },
    {
        "id": "8f6be341d306c33e",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 27,
        "width": 1,
        "height": 1
    },
    {
        "id": "66ad508829514c54",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 28,
        "width": 1,
        "height": 1
    },
    {
        "id": "08c4a6b7a4ef9590",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "9b65166c46416877",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "66081a1da3bce324",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "9b65166c46416877",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "bf3e87e0513f50a0",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "9b65166c46416877",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "43681b67c068b1c7",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "9b65166c46416877",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "ec7bda70d07006be",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "9b65166c46416877",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "d5683ea0b750b074",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "9b65166c46416877",
        "order": 9,
        "width": 9,
        "height": 1
    },
    {
        "id": "22e2d3cc59e5c72b",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "1391ab30eee3f19f",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "b63e7ac97cdce519",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 8,
        "width": 8,
        "height": 1
    },
    {
        "id": "505d4fc78d9b5af4",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "1764d98a592a34d4",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "d3347a2d8558d19f",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "6bb3a5030ecd7ee3",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 16,
        "width": 2,
        "height": 1
    },
    {
        "id": "ba88a2ec8c0ad653",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "257878e10a090d0e",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "09aaa10bc9a6592b",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "b3333885763e233f",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 24,
        "width": 4,
        "height": 1
    },
    {
        "id": "ac229033326c501b",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 26,
        "width": 1,
        "height": 1
    },
    {
        "id": "699efb5cf5d5a8d9",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 27,
        "width": 1,
        "height": 1
    },
    {
        "id": "2f007b15e0cac7a5",
        "type": "ui_spacer",
        "z": "32374ce96bb10d12",
        "name": "spacer",
        "group": "285a4a1d9a259f1c",
        "order": 28,
        "width": 1,
        "height": 1
    },
    {
        "id": "1b26083b424b6925",
        "type": "file in",
        "z": "f20d4b2721bc1e09",
        "name": "read file",
        "filename": "D:\\University\\Masters Education\\Semester III\\dev\\data.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 200,
        "y": 80,
        "wires": [
            [
                "aaf8efbccc4e37b1"
            ]
        ]
    },
    {
        "id": "aaf8efbccc4e37b1",
        "type": "csv",
        "z": "f20d4b2721bc1e09",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 390,
        "y": 80,
        "wires": [
            [
                "0be3d2774909f3d7"
            ]
        ]
    },
    {
        "id": "0be3d2774909f3d7",
        "type": "join",
        "z": "f20d4b2721bc1e09",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 570,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "74224315ff6ba594",
        "type": "function",
        "z": "d7e86ab1dbf38c0c",
        "name": "",
        "func": "if(msg.init)\n    return null;\nlet data = msg.payload;\nlet tempClass = msg.tempClass;\nmsg.payload = `${data},${tempClass}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            [
                "8ad6ba3de6c7e2b1"
            ]
        ]
    },
    {
        "id": "8ad6ba3de6c7e2b1",
        "type": "file",
        "z": "d7e86ab1dbf38c0c",
        "name": "",
        "filename": "D:\\University\\Masters Education\\Semester III\\dev\\datanew.csv",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 610,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "88ddafbc38489166",
        "type": "function",
        "z": "6bde268a23e17faf",
        "name": "applyRangeRules",
        "func": "let {range_values, readings} = msg.payload;\nlet labelled_readings = [];\nfor(let i =0; i<readings.length; i++){\n    let value = readings[i].value\n    labelled_readings[i] = {value: value, status: getStatus(value, range_values)}\n}\nmsg.payload = labelled_readings;\nreturn msg;\n\nfunction getStatus(value, range_values){\n    const{very_low_max, low_min, low_max, normal_min, normal_max, high_min, high_max, very_high_min}=range_values;\n    if(value <= very_low_max)\n        return \"very low\";\n    if(value >= low_min && value <= low_max)\n        return \"low\";\n    if(value >= normal_min && value <= normal_max)\n        return \"normal\";\n    if(value >= high_min && value <= high_max)\n        return \"high\";\n    if(value >= very_high_min)\n        return \"very_high\";\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 260,
        "wires": [
            [
                "2d04c50b051532d9"
            ]
        ]
    },
    {
        "id": "2d04c50b051532d9",
        "type": "function",
        "z": "6bde268a23e17faf",
        "name": "NormalizeData",
        "func": "//zi = (xi – min(x)) / (max(x) – min(x))\nlet max = -1;\nlet min = 100000000000;\nlet readings = msg.payload;\nfor(let i = 0; i<readings.length; i++){\n    let currentVal = readings[i].value;\n    if(currentVal > max)\n        max=currentVal;\n    if(currentVal < min)\n        min=currentVal;\n}\nlet normalizedValues = readings.map(x => {\n    return{\n        value: (x.value-min)/(max-min),\n        status: x.status\n    }\n});\nmsg.payload = {\n    readings: normalizedValues,\n    min,\n    max\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "de565ad94fac0180",
        "type": "function",
        "z": "6bde268a23e17faf",
        "name": "getTemperatureData",
        "func": "let {range_values, temperature_readings} = msg.payload;\nlet temp_range_values = range_values.find(x => x.variable===\"temperature\");\nmsg.payload ={range_values: temp_range_values, readings: temperature_readings};\nmsg.topic=\"temperature\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 120,
        "wires": [
            [
                "88ddafbc38489166"
            ]
        ]
    },
    {
        "id": "d11af3a872894da9",
        "type": "function",
        "z": "6bde268a23e17faf",
        "name": "getHumidityData",
        "func": "let {range_values, humidity_readings} = msg.payload;\nlet humidity_range_values = range_values.find(x => x.variable===\"humidity\");\nmsg.payload ={range_values: humidity_range_values, readings: humidity_readings};\nmsg.topic=\"humidity\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 380,
        "wires": [
            [
                "88ddafbc38489166"
            ]
        ]
    },
    {
        "id": "f973fa1eb70a3c3a",
        "type": "function",
        "z": "6bde268a23e17faf",
        "name": "getPressureData",
        "func": "let {range_values, pressure_readings} = msg.payload;\nlet pressure_range_values = range_values.find(x => x.variable===\"pressure\");\nmsg.payload ={range_values: pressure_range_values, readings: pressure_readings};\nmsg.topic=\"pressure\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 260,
        "wires": [
            [
                "88ddafbc38489166"
            ]
        ]
    },
    {
        "id": "8b19aacb63a6a5b6",
        "type": "function",
        "z": "51cab0923b3cdfd1",
        "name": "Train",
        "func": "const neuralNetwork = new brain.NeuralNetwork();\nconst data = msg.payload;\nlet preparedData = [];\nfor(let i=0; i<data.length; i++){\n    let inputVal = data[i].value;\n    let outputVal = data[i].status;\n  preparedData.push({input: {t:inputVal}, output: {[outputVal]: 1}});\n}\nneuralNetwork.train(preparedData);\nflow.set(\"neuralNetwork\", neuralNetwork)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "brain",
                "module": "brain.js"
            }
        ],
        "x": 630,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "66c9f844d6ad1f1f",
        "type": "switch",
        "z": "51cab0923b3cdfd1",
        "name": "",
        "property": "init",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "8b19aacb63a6a5b6"
            ],
            [
                "a02a3cb506b1ac53"
            ]
        ]
    },
    {
        "id": "a02a3cb506b1ac53",
        "type": "function",
        "z": "51cab0923b3cdfd1",
        "name": "RunModel",
        "func": "\n//run model\nlet value = msg.payload.normalizedValue\nconst network = flow.get(\"neuralNetwork\");\nif(!network)\n    return msg;\nconst output = network.run({ t: (value) });\n\n//get highest probability\nlet probability = 0, statusClass='';\nfor (let property in output){\n     if(output[property]>probability){\n        probability = output[property];\n        statusClass= property;\n    }\n}\n\nmsg.payload = {\n     probabilities: output,\n     status: statusClass,\n     ...msg.payload\n}\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "f332113a57ebb977",
        "type": "function",
        "z": "ad8135a6624fbd19",
        "name": "Train",
        "func": "const neuralNetwork = new brain.NeuralNetwork();\nconst data = msg.payload;\nlet preparedData = [];\nfor(let i=0; i<data.length; i++){\n    let inputVal = data[i].value;\n    let outputVal = data[i].status;\n  preparedData.push({input: {t:inputVal}, output: {[outputVal]: 1}});\n}\nneuralNetwork.train(preparedData);\nflow.set(\"neuralNetwork\", neuralNetwork)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "brain",
                "module": "brain.js"
            }
        ],
        "x": 650,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "42b87ca37fa29888",
        "type": "switch",
        "z": "ad8135a6624fbd19",
        "name": "",
        "property": "init",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "f332113a57ebb977"
            ],
            [
                "5d7daa29cf131bbe"
            ]
        ]
    },
    {
        "id": "5d7daa29cf131bbe",
        "type": "function",
        "z": "ad8135a6624fbd19",
        "name": "RunModel",
        "func": "\n//run model\nlet value = msg.payload.normalizedValue\nconst network = flow.get(\"neuralNetwork\");\nif(!network)\n    return msg;\nconst output = network.run({ t: (value) });\n\n//get highest probability\nlet probability = 0, statusClass='';\nfor (let property in output){\n     if(output[property]>probability){\n        probability = output[property];\n        statusClass= property;\n    }\n}\n\nmsg.payload = {\n     probabilities: output,\n     status: statusClass,\n     ...msg.payload\n}\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "78c8932883973835",
        "type": "function",
        "z": "02f2c978721b1b05",
        "name": "Train",
        "func": "const neuralNetwork = new brain.NeuralNetwork();\nconst data = msg.payload;\nlet preparedData = [];\nfor(let i=0; i<data.length; i++){\n    let inputVal = data[i].value;\n    let outputVal = data[i].status;\n  preparedData.push({input: {t:inputVal}, output: {[outputVal]: 1}});\n}\nneuralNetwork.train(preparedData);\nflow.set(\"neuralNetwork\", neuralNetwork)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "brain",
                "module": "brain.js"
            }
        ],
        "x": 630,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "188a72dffbefc133",
        "type": "switch",
        "z": "02f2c978721b1b05",
        "name": "",
        "property": "init",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 280,
        "wires": [
            [
                "78c8932883973835"
            ],
            [
                "6661cc1f8b583ed4"
            ]
        ]
    },
    {
        "id": "6661cc1f8b583ed4",
        "type": "function",
        "z": "02f2c978721b1b05",
        "name": "RunModel",
        "func": "\n//run model\nlet value = msg.payload.normalizedValue\nconst network = flow.get(\"neuralNetwork\");\nif(!network)\n    return msg;\nconst output = network.run({ t: (value) });\n\n//get highest probability\nlet probability = 0, statusClass='';\nfor (let property in output){\n     if(output[property]>probability){\n        probability = output[property];\n        statusClass= property;\n    }\n}\n\nmsg.payload = {\n     probabilities: output,\n     status: statusClass,\n     ...msg.payload\n}\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "8dca42bdf74c7c6a",
        "type": "function",
        "z": "6282415b8a339d0d",
        "name": "",
        "func": "let max = -1;\nlet min = 100000000000;\nlet readings = msg.payload;\nfor(let i = 0; i<readings.length; i++){\n    let currentVal = readings[i].value;\n    if(currentVal > max)\n        max=currentVal;\n    if(currentVal < min)\n        min=currentVal;\n}\nmsg.payload ={readings, min, max}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "1ef48e35c504b6c4",
        "type": "function",
        "z": "97c34c3cf3ec4a93",
        "name": "",
        "func": "const {min, max, value} = msg.payload;\nlet normalizedValue =(value-min)/(max-min);\nmsg.payload = {\n    normalizedValue,\n    max,\n    min,\n    ...msg.payload,\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "0c8845731508ab7e",
        "type": "function",
        "z": "3eea6da9acd67980",
        "name": "train",
        "func": "\nconst { Matrix } = MLMatrix;\n\nconst trainingData = msg.payload;\nlet featuresDataArray = [];\nlet targetDataArray = [];\n\nfor(let i=0; i<trainingData.length;i++){\n    let row = trainingData[i];\n    let rowArray = Object.values(row)\n    let features = []\n    let target;\n    for(let j=0; j<rowArray.length;j++){\n        let data = rowArray[j] \n        if(j==rowArray.length-1)\n            target = data\n        else features.push(data)\n    }\n    \n    featuresDataArray.push(features)\n    targetDataArray.push(target)\n}\n\n\n\n\n// Our training set (X,Y).\nconst X = new Matrix(featuresDataArray);\nconst Y = Matrix.columnVector(targetDataArray);\n\n\n// We will train our model.\nconst logreg = new LogisticRegression({ numSteps: 1000, learningRate: 5e-3 });\nlogreg.train(X, Y);\n\nflow.set(\"logRegModel\", logreg)\nmsg.payload ={\n    featuresDataArray,\n    targetDataArray\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//import SimpleLinearRegression from 'ml-regression-simple-linear';\n\n",
        "finalize": "",
        "libs": [
            {
                "var": "LogisticRegression",
                "module": "ml-logistic-regression"
            },
            {
                "var": "MLMatrix",
                "module": "ml-matrix"
            }
        ],
        "x": 590,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "01f409f9b65871fc",
        "type": "switch",
        "z": "3eea6da9acd67980",
        "name": "",
        "property": "init",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 360,
        "wires": [
            [
                "0c8845731508ab7e"
            ],
            [
                "4cb6c2ef85e9559a"
            ]
        ]
    },
    {
        "id": "4cb6c2ef85e9559a",
        "type": "function",
        "z": "3eea6da9acd67980",
        "name": "runModel",
        "func": "const { Matrix } = MLMatrix;\n// We try to predict the test set.\n\nconst testData = msg.payload;\n\nlet featuresDataArray = [];\nlet rowArray = Object.values(testData);\nlet actual = rowArray.pop()\nlet features = [];\nfor(let j=0; j<rowArray.length;j++){\n    features.push( rowArray[j])\n}\nconst Xtest = new Matrix(\n[features]\n);\n//const Ytest = Matrix.columnVector([1]);\nconst logreg = flow.get(\"logRegModel\")\nconst finalResults = logreg.predict(Xtest);\n\nmsg.payload = {\n    algorithm: \"LogisticRegression\",\n    result: finalResults,\n    actual\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//import SimpleLinearRegression from 'ml-regression-simple-linear';\n\n",
        "finalize": "",
        "libs": [
            {
                "var": "LogisticRegression",
                "module": "ml-logistic-regression"
            },
            {
                "var": "MLMatrix",
                "module": "ml-matrix"
            }
        ],
        "x": 580,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "b6cc87397df25997",
        "type": "join",
        "z": "b1942cd0e3fb69cc",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 490,
        "y": 220,
        "wires": [
            [
                "f7dd62e8ce3bc4e2"
            ]
        ]
    },
    {
        "id": "f7dd62e8ce3bc4e2",
        "type": "csv",
        "z": "b1942cd0e3fb69cc",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "ef73343f65c5c77f",
        "type": "file in",
        "z": "b1942cd0e3fb69cc",
        "name": "ReadFile",
        "filename": "data_beautified2random.csv",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 240,
        "y": 220,
        "wires": [
            [
                "b6cc87397df25997"
            ]
        ]
    },
    {
        "id": "3b5a6523f684bbd2",
        "type": "file in",
        "z": "b1942cd0e3fb69cc",
        "d": true,
        "name": "ReadFile",
        "filename": "Test_Data_CSV3.csv",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 460,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "bfb105564acf6b2f",
        "type": "switch",
        "z": "65bb01d7a33d3a8f",
        "name": "",
        "property": "init",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 280,
        "wires": [
            [
                "c1d05b1affdb809c"
            ],
            [
                "d2a3b63e8dd38a3d"
            ]
        ]
    },
    {
        "id": "c1d05b1affdb809c",
        "type": "function",
        "z": "65bb01d7a33d3a8f",
        "name": "train",
        "func": "\nconst { Matrix } = MLMatrix;\n\n// assuming that you created Xtrain, Xtest, Ytrain, Ytest\nconst { MultinomialNB, GaussianNB  } = mlNaiveBayes;\n\nconst trainingData = msg.payload;\nlet featuresDataArray = [];\nlet targetDataArray = [];\n\nfor(let i=0; i<trainingData.length;i++){\n    let row = trainingData[i];\n    let rowArray = Object.values(row)\n    let features = []\n    let target;\n    for(let j=0; j<rowArray.length;j++){\n        let data = rowArray[j] \n        if(j==rowArray.length-1)\n            target = data\n        else features.push(data)\n    }\n    \n    featuresDataArray.push(features)\n    targetDataArray.push(target-1)\n}\n\n// Our training set (X,Y).\n//const X = featuresDataArray;\n//const Y = targetDataArray;\n\n// Our training set (X,Y).\nconst X = new Matrix(featuresDataArray);\nconst Y = targetDataArray;\n\nvar model = new MultinomialNB();\nmodel.train(X, Y);\n\n\nflow.set(\"naiveBayesModel\", model)\nmsg.payload ={\n    featuresDataArray,\n    targetDataArray\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//import SimpleLinearRegression from 'ml-regression-simple-linear';\n\n",
        "finalize": "",
        "libs": [
            {
                "var": "mlNaiveBayes",
                "module": "ml-naivebayes"
            },
            {
                "var": "MLMatrix",
                "module": "ml-matrix"
            }
        ],
        "x": 610,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "d2a3b63e8dd38a3d",
        "type": "function",
        "z": "65bb01d7a33d3a8f",
        "name": "runModel",
        "func": "const { Matrix } = MLMatrix;\n// We try to predict the test set.\n\nconst testData = msg.payload;\nlet featuresDataArray = [];\nlet rowArray = Object.values(testData);\nconst actual=rowArray.pop();\nlet features = [];\nfor(let j=0; j<rowArray.length;j++){\n    features.push(rowArray[j])\n}\n\nconst Xtest = new Matrix([features]);\n//const Ytest = Matrix.columnVector([1]);\nconst model = flow.get(\"naiveBayesModel\")\nvar predictions = model.predict(Xtest);\nconst resultData = predictions+1;\nconst result =  parseInt(resultData[0])+1\n\nmsg.payload = {\n    algorithm: \"NaiveBayes\",\n    result,\n    actual,\n    testData,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//import SimpleLinearRegression from 'ml-regression-simple-linear';\n\n",
        "finalize": "",
        "libs": [
            {
                "var": "LogisticRegression",
                "module": "ml-logistic-regression"
            },
            {
                "var": "MLMatrix",
                "module": "ml-matrix"
            }
        ],
        "x": 480,
        "y": 420,
        "wires": [
            [
                "50cf045f954fd49e"
            ]
        ]
    },
    {
        "id": "50cf045f954fd49e",
        "type": "function",
        "z": "65bb01d7a33d3a8f",
        "name": "calculateStats",
        "func": "\nconst { result, actual} = msg.payload\nlet totalTests = context.get(\"totalTests\");\nlet correctPredictions = context.get(\"correctPredictions\");\n\ntotalTests++;\nif(actual === result){\n     correctPredictions++;\n     let stat = context.get(result+\"Stats\")\n     stat.tp = stat.tp + 1\n     stat.precision = stat.tp/(stat.tp + stat.fp)\n     stat.recall = stat.tp/(stat.tp + stat.fn)\n     stat.fscore = 2*((stat.precision*stat.recall)/(stat.precision + stat.recall))\n     stat.precision = Math.round((stat.precision + Number.EPSILON) * 1000) / 1000\n     stat.recall = Math.round((stat.recall + Number.EPSILON) * 1000) / 1000\n     stat.fscore = Math.round((stat.fscore + Number.EPSILON) * 1000) / 1000\n     context.set(result+\"Stats\", stat)\n}\nelse{\n     let stat1 = context.get(actual+\"Stats\")\n     stat1.fn = stat1.fn + 1\n     let stat2 = context.get(result+\"Stats\")\n     stat2.fp = stat2.fp + 1\n     stat1.precision = stat1.tp/(stat1.tp + stat1.fp)\n     stat1.recall = stat1.tp/(stat1.tp + stat1.fn)\n     stat2.precision = stat2.tp/(stat2.tp + stat2.fp)\n     stat2.recall = stat2.tp/(stat2.tp + stat2.fn)\n     stat1.fscore = 2*((stat1.precision*stat1.recall)/(stat1.precision + stat1.recall))\n     stat2.fscore = 2*((stat2.precision*stat2.recall)/(stat2.precision + stat2.recall))\n     stat1.precision = Math.round((stat1.precision + Number.EPSILON) * 1000) / 1000\n     stat1.recall = Math.round((stat1.recall + Number.EPSILON) * 1000) / 1000\n     stat1.fscore = Math.round((stat1.fscore + Number.EPSILON) * 1000) / 1000\n     stat2.precision = Math.round((stat2.precision + Number.EPSILON) * 1000) / 1000\n     stat2.recall = Math.round((stat2.recall + Number.EPSILON) * 1000) / 1000\n     stat2.fscore = Math.round((stat2.fscore + Number.EPSILON) * 1000) / 1000\n     context.set(actual+\"Stats\", stat1)\n     context.set(result+\"Stats\", stat2)\n}\n\nconst acc = (correctPredictions/totalTests)*100\nconst accuracy = Math.round((acc + Number.EPSILON) * 1000) / 1000\n\ncontext.set(\"correctPredictions\", correctPredictions);\ncontext.set(\"totalTests\", totalTests);\nmsg.payload ={\n    ...msg.payload,\n    accuracy,\n    classStats:{\n    class1: context.get(\"1Stats\"),\n    class2: context.get(\"2Stats\"),\n    class3: context.get(\"3Stats\"),\n    class4: context.get(\"4Stats\")\n    }\n\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"totalTests\", 0);\ncontext.set(\"correctPredictions\", 0);\ncontext.set(\"1Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})\ncontext.set(\"2Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})\ncontext.set(\"3Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})\ncontext.set(\"4Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 420,
        "wires": [
            [
                "f2e0a3707eacf780"
            ]
        ]
    },
    {
        "id": "f2e0a3707eacf780",
        "type": "function",
        "z": "65bb01d7a33d3a8f",
        "name": "addTimeData",
        "func": "const {testData, result} = msg.payload;\n//time passed get from testData\n//count of each class\nconst count = context.get(result+\"Count\")\ncontext.set(result+\"Count\", count + 1)\n\nlet currentTime = 0\nfor (var prop in testData) {\n    currentTime = testData[prop]\n    break;\n}\nlet startTime = context.get(\"startTime\")\nif(!startTime){\n   startTime = currentTime \n   context.set(\"startTime\", startTime)\n}\n    \nconst timeDiffInMins = Math.round((currentTime-startTime)/60000)\nmsg.payload = {\n   ...msg.payload,\n   timeData:{\n         timeDiffInMins,\n   timeNow: new Date(currentTime),\n   count:{\n    class1:context.get(\"1Count\"),\n    class2:context.get(\"2Count\"),\n    class3:context.get(\"3Count\"),\n    class4:context.get(\"4Count\")\n   }\n   }\n \n  \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"1Count\",0)\ncontext.set(\"2Count\",0)\ncontext.set(\"3Count\",0)\ncontext.set(\"4Count\",0)",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "b4b47f19ee854893",
        "type": "switch",
        "z": "9566982d40e572b6",
        "name": "",
        "property": "init",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 140,
        "wires": [
            [
                "3724bacfe4d54a7e"
            ],
            [
                "9728f44b22a7540a"
            ]
        ]
    },
    {
        "id": "3724bacfe4d54a7e",
        "type": "function",
        "z": "9566982d40e572b6",
        "name": "train",
        "func": "\nconst { Matrix } = MLMatrix;\nconst { DecisionTreeClassifier} = mlCart;\n\nconst trainingData = msg.payload;\nlet featuresDataArray = [];\nlet targetDataArray = [];\n\nfor(let i=0; i<trainingData.length;i++){\n    let row = trainingData[i];\n    let rowArray = Object.values(row)\n    let features = []\n    let target;\n    for(let j=0; j<rowArray.length;j++){\n        let data = rowArray[j] \n        if(j==rowArray.length-1)\n            target = data\n        else features.push(data)\n    }\n    \n    featuresDataArray.push(features)\n    targetDataArray.push(target)\n}\n\n// Our training set (X,Y).\nconst X = new Matrix(featuresDataArray);\nconst Y = targetDataArray;\n\n\nconst options = {\n  gainFunction: 'gini',\n  maxDepth: 10,\n  minNumSamples: 3,\n};\n\nconst classifier = new DecisionTreeClassifier(options);\nclassifier.train(X, Y);\n\nflow.set(\"dTModel\", classifier)\nmsg.payload ={\n    featuresDataArray,\n    targetDataArray\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//import SimpleLinearRegression from 'ml-regression-simple-linear';\n\n",
        "finalize": "",
        "libs": [
            {
                "var": "MLMatrix",
                "module": "ml-matrix"
            },
            {
                "var": "mlCart",
                "module": "ml-cart"
            }
        ],
        "x": 510,
        "y": 20,
        "wires": [
            [
                "6f21d792c1e821d6"
            ]
        ]
    },
    {
        "id": "9728f44b22a7540a",
        "type": "function",
        "z": "9566982d40e572b6",
        "name": "runModel",
        "func": "const { Matrix } = MLMatrix;\nconst testData = msg.payload;\nlet featuresDataArray = [];\nlet rowArray = Object.values(testData);\nconst actual = rowArray.pop()\nlet features = [];\nfor(let j=0; j<rowArray.length;j++){\n    features.push( rowArray[j])\n}\nconst Xtest = new Matrix(\n[features]\n);\n\nconst classifier = flow.get(\"dTModel\")\nlet result = \"\"\ntry{\n   resultData = classifier.predict(Xtest); \n   result = parseInt(resultData[0])\n}catch(e){}\n\nmsg.payload = {\n    algorithm: \"DecisionTree\",\n    result,\n    actual,\n    testData,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//import SimpleLinearRegression from 'ml-regression-simple-linear';\n\n",
        "finalize": "",
        "libs": [
            {
                "var": "LogisticRegression",
                "module": "ml-logistic-regression"
            },
            {
                "var": "MLMatrix",
                "module": "ml-matrix"
            }
        ],
        "x": 340,
        "y": 260,
        "wires": [
            [
                "6fad0560c049ae6c"
            ]
        ]
    },
    {
        "id": "6fad0560c049ae6c",
        "type": "function",
        "z": "9566982d40e572b6",
        "name": "calculateStats",
        "func": "\nconst { result, actual} = msg.payload\nlet totalTests = context.get(\"totalTests\");\nlet correctPredictions = context.get(\"correctPredictions\");\n\ntotalTests++;\nif(actual === result){\n     correctPredictions++;\n     let stat = context.get(result+\"Stats\")\n     stat.tp = stat.tp + 1\n     stat.precision = stat.tp/(stat.tp + stat.fp)\n     stat.recall = stat.tp/(stat.tp + stat.fn)\n     stat.fscore = 2*((stat.precision*stat.recall)/(stat.precision + stat.recall))\n     stat.precision = Math.round((stat.precision + Number.EPSILON) * 1000) / 1000\n     stat.recall = Math.round((stat.recall + Number.EPSILON) * 1000) / 1000\n     stat.fscore = Math.round((stat.fscore + Number.EPSILON) * 1000) / 1000\n     context.set(result+\"Stats\", stat)\n}\nelse{\n     let stat1 = context.get(actual+\"Stats\")\n     stat1.fn = stat1.fn + 1\n     let stat2 = context.get(result+\"Stats\")\n     stat2.fp = stat2.fp + 1\n     stat1.precision = stat1.tp/(stat1.tp + stat1.fp)\n     stat1.recall = stat1.tp/(stat1.tp + stat1.fn)\n     stat2.precision = stat2.tp/(stat2.tp + stat2.fp)\n     stat2.recall = stat2.tp/(stat2.tp + stat2.fn)\n     stat1.fscore = 2*((stat1.precision*stat1.recall)/(stat1.precision + stat1.recall))\n     stat2.fscore = 2*((stat2.precision*stat2.recall)/(stat2.precision + stat2.recall))\n     stat1.precision = Math.round((stat1.precision + Number.EPSILON) * 1000) / 1000\n     stat1.recall = Math.round((stat1.recall + Number.EPSILON) * 1000) / 1000\n     stat1.fscore = Math.round((stat1.fscore + Number.EPSILON) * 1000) / 1000\n     stat2.precision = Math.round((stat2.precision + Number.EPSILON) * 1000) / 1000\n     stat2.recall = Math.round((stat2.recall + Number.EPSILON) * 1000) / 1000\n     stat2.fscore = Math.round((stat2.fscore + Number.EPSILON) * 1000) / 1000\n     context.set(actual+\"Stats\", stat1)\n     context.set(result+\"Stats\", stat2)\n}\n\nconst acc = (correctPredictions/totalTests)*100\nconst accuracy = Math.round((acc + Number.EPSILON) * 1000) / 1000\n\ncontext.set(\"correctPredictions\", correctPredictions);\ncontext.set(\"totalTests\", totalTests);\nmsg.payload ={\n    ...msg.payload,\n    accuracy,\n    classStats:{\n    class1: context.get(\"1Stats\"),\n    class2: context.get(\"2Stats\"),\n    class3: context.get(\"3Stats\"),\n    class4: context.get(\"4Stats\")\n    }\n\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"totalTests\", 0);\ncontext.set(\"correctPredictions\", 0);\ncontext.set(\"1Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})\ncontext.set(\"2Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})\ncontext.set(\"3Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})\ncontext.set(\"4Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "74211aea63b5ff8b",
        "type": "switch",
        "z": "9566982d40e572b6",
        "name": "",
        "property": "isclassification",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 380,
        "wires": [
            [
                "b4b47f19ee854893"
            ],
            [
                "da72f93c3b90a17e"
            ]
        ]
    },
    {
        "id": "da72f93c3b90a17e",
        "type": "switch",
        "z": "9566982d40e572b6",
        "name": "",
        "property": "init",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 440,
        "wires": [
            [
                "b7c88f4bfe45f4b1"
            ],
            [
                "164387bc87f233d2"
            ]
        ]
    },
    {
        "id": "164387bc87f233d2",
        "type": "function",
        "z": "9566982d40e572b6",
        "name": "runModel",
        "func": "const { Matrix } = MLMatrix;\nconst testData = msg.payload;\nlet featuresDataArray = [];\nlet rowArray = Object.values(testData);\nconst actual = rowArray.pop()\nlet features = [];\nfor(let j=0; j<rowArray.length;j++){\n    features.push(rowArray[j])\n}\n\nconst Xtest = new Matrix(\n[features]\n);\n//const Ytest = Matrix.columnVector([1]);\nconst regression = flow.get(\"dTRegressionModel\");\nlet result = \"\"\ntry{\n   let resultData = regression.predict(Xtest);\n   result = parseInt(resultData[0])\n}catch(e){\n    \n}\n\n\nmsg.payload = {\n    algorithm: \"DecisionTree\",\n    result,\n    actual,\n    testData,\n    features\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "LogisticRegression",
                "module": "ml-logistic-regression"
            },
            {
                "var": "MLMatrix",
                "module": "ml-matrix"
            }
        ],
        "x": 540,
        "y": 500,
        "wires": [
            [
                "dbfff2a1f094d40c"
            ]
        ]
    },
    {
        "id": "dbfff2a1f094d40c",
        "type": "function",
        "z": "9566982d40e572b6",
        "name": "calculateStats",
        "func": "const { result, actual} = msg.payload\nlet totalTests = context.get(\"totalTests\");\nlet pastData = context.get(\"pastData\");\n\npastData.push({actual: actual, result: result})\ntotalTests++;\n\nlet mse = 0\nfor(let i in pastData){\n    const dataRow = pastData[i]\n    mse += Math.pow((dataRow.actual - dataRow.result),2)/totalTests\n}\n\nlet absoluteErrorTotal = 0\nfor(let i in pastData){\n    const dataRow = pastData[i]\n    absoluteErrorTotal += Math.abs(dataRow.actual - dataRow.result)\n}\nconst mae = Math.round(((absoluteErrorTotal/totalTests) + Number.EPSILON) * 1000) / 1000\nconst rmse = Math.round(( Math.sqrt(mse) + Number.EPSILON) * 1000) / 1000\ncontext.set(\"pastData\", pastData);\ncontext.set(\"totalTests\", totalTests);\nmsg.payload ={\n    ...msg.payload,\n    pastData,\n    classStats:{\n       rmse,\n       mae \n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"totalTests\", 0);\ncontext.set(\"pastData\", []);",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "8b27f15d52c6f6f2",
        "type": "comment",
        "z": "9566982d40e572b6",
        "name": "Regression Flow",
        "info": "",
        "x": 420,
        "y": 360,
        "wires": []
    },
    {
        "id": "27f8d4711c2e3887",
        "type": "comment",
        "z": "9566982d40e572b6",
        "name": "Classification Flow",
        "info": "",
        "x": 297.1999816894531,
        "y": 41.19999694824219,
        "wires": []
    },
    {
        "id": "b7c88f4bfe45f4b1",
        "type": "function",
        "z": "9566982d40e572b6",
        "name": "train",
        "func": "\nconst { Matrix } = MLMatrix;\nconst { DecisionTreeRegression } = mlCart;\n\nconst trainingData = msg.payload;\nlet featuresDataArray = [];\nlet targetDataArray = [];\n\nfor(let i=0; i<trainingData.length;i++){\n    let row = trainingData[i];\n    let rowArray = Object.values(row)\n    let features = []\n    let target;\n    for(let j=0; j<rowArray.length;j++){\n        let data = rowArray[j] \n        if(j==rowArray.length-1)\n            target = data\n        else features.push(data)\n    }\n    \n    featuresDataArray.push(features)\n    targetDataArray.push(target)\n}\n\n// Our training set (X,Y).\nconst X = new Matrix(featuresDataArray);\nconst Y = targetDataArray;\n\nconst regression = new DecisionTreeRegression();\nregression.train(X, Y);\n\nflow.set(\"dTRegressionModel\", regression)\nmsg.payload ={\n    featuresDataArray,\n    targetDataArray\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//import SimpleLinearRegression from 'ml-regression-simple-linear';\n\n",
        "finalize": "",
        "libs": [
            {
                "var": "MLMatrix",
                "module": "ml-matrix"
            },
            {
                "var": "mlCart",
                "module": "ml-cart"
            }
        ],
        "x": 690,
        "y": 380,
        "wires": [
            [
                "d51d032fb27f2483"
            ]
        ]
    },
    {
        "id": "40d404278569a6e7",
        "type": "function",
        "z": "9566982d40e572b6",
        "d": true,
        "name": "addTimeData",
        "func": "const {testData, result} = msg.payload;\n//time passed get from testData\n//count of each class\nconst count = context.get(result+\"Count\")\ncontext.set(result+\"Count\", count + 1)\n\nlet currentTime = 0\nfor (var prop in testData) {\n    currentTime = testData[prop]\n    break;\n}\nlet startTime = context.get(\"startTime\")\nif(!startTime){\n   startTime = currentTime \n   context.set(\"startTime\", startTime)\n}\n    \nconst timeDiffInMins = Math.round((currentTime-startTime)/60000)\nmsg.payload = {\n   ...msg.payload,\n   timeData:{\n         timeDiffInMins,\n   timeNow: new Date(currentTime),\n   count:{\n    class1:context.get(\"1Count\"),\n    class2:context.get(\"2Count\"),\n    class3:context.get(\"3Count\"),\n    class4:context.get(\"4Count\")\n   }\n   }\n \n  \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"1Count\",0)\ncontext.set(\"2Count\",0)\ncontext.set(\"3Count\",0)\ncontext.set(\"4Count\",0)",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6f21d792c1e821d6",
        "type": "debug",
        "z": "9566982d40e572b6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 40,
        "wires": []
    },
    {
        "id": "d51d032fb27f2483",
        "type": "debug",
        "z": "9566982d40e572b6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 360,
        "wires": []
    },
    {
        "id": "f52fea48342cd315",
        "type": "switch",
        "z": "b4fdd94459dced40",
        "name": "",
        "property": "init",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 460,
        "wires": [
            [
                "3c61982af29affa9"
            ],
            [
                "d5b4c830e42d2a81"
            ]
        ]
    },
    {
        "id": "d5b4c830e42d2a81",
        "type": "function",
        "z": "b4fdd94459dced40",
        "name": "runModel",
        "func": "const { Matrix } = MLMatrix;\nconst testData = msg.payload;\nlet featuresDataArray = [];\nlet rowArray = Object.values(testData);\nconst actual = rowArray.pop()\nlet features = [];\nfor(let j=0; j<rowArray.length;j++){\n    features.push(rowArray[j])\n}\n\nconst Xtest = new Matrix(\n[features]\n);\n//const Ytest = Matrix.columnVector([1]);\nconst regression = flow.get(\"rfRegressionModel\");\nlet result = \"\"\ntry{\n   let resultData = regression.predict(Xtest);\n   result = parseInt(resultData[0])\n}catch(e){\n    \n}\n\n\nmsg.payload = {\n    algorithm: \"RandomForest\",\n    result,\n    actual,\n    testData,\n    features\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "LogisticRegression",
                "module": "ml-logistic-regression"
            },
            {
                "var": "MLMatrix",
                "module": "ml-matrix"
            }
        ],
        "x": 300,
        "y": 500,
        "wires": [
            [
                "be2e8afac42cf4ac"
            ]
        ]
    },
    {
        "id": "be2e8afac42cf4ac",
        "type": "function",
        "z": "b4fdd94459dced40",
        "name": "calculateStats",
        "func": "const { result, actual} = msg.payload\nlet totalTests = context.get(\"totalTests\");\nlet pastData = context.get(\"pastData\");\n\npastData.push({actual: actual, result: result})\ntotalTests++;\n\nlet mse = 0\nfor(let i in pastData){\n    const dataRow = pastData[i]\n    mse += Math.pow((dataRow.actual - dataRow.result),2)/totalTests\n}\n\nlet absoluteErrorTotal = 0\nfor(let i in pastData){\n    const dataRow = pastData[i]\n    absoluteErrorTotal += Math.abs(dataRow.actual - dataRow.result)\n}\nconst mae = Math.round(((absoluteErrorTotal/totalTests) + Number.EPSILON) * 1000) / 1000\nconst rmse = Math.round(( Math.sqrt(mse) + Number.EPSILON) * 1000) / 1000\ncontext.set(\"pastData\", pastData);\ncontext.set(\"totalTests\", totalTests);\nmsg.payload ={\n    ...msg.payload,\n    pastData,\n    classStats:{\n       rmse,\n       mae \n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"totalTests\", 0);\ncontext.set(\"pastData\", []);",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "3c61982af29affa9",
        "type": "function",
        "z": "b4fdd94459dced40",
        "name": "train",
        "func": "const { Matrix } = MLMatrix;\nconst { RandomForestRegression } = mlRandomForest;\n\nconst trainingData = msg.payload;\nlet featuresDataArray = [];\nlet targetDataArray = [];\n\nfor(let i=0; i<trainingData.length;i++){\n    let row = trainingData[i];\n    let rowArray = Object.values(row)\n    let features = []\n    let target =\"\";\n    for(let j=0; j<rowArray.length;j++){\n        let data = rowArray[j] \n        if(j==rowArray.length-1){\n             target = data\n             break\n        }\n        else features.push(data)\n    }\n    \n    featuresDataArray.push(features)\n    targetDataArray.push(target)\n}\n\n// Our training set (X,Y).\n\nconst options = {\n  seed: 3,\n  maxFeatures: 2,\n  replacement: false,\n  nEstimators: 200\n};\nconst regression = new RandomForestRegression();\nregression.train(featuresDataArray, targetDataArray);\nflow.set(\"rfRegressionModel\", regression)\n\nmsg.payload ={\n    featuresDataArray,\n    targetDataArray\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//import SimpleLinearRegression from 'ml-regression-simple-linear';\n\n",
        "finalize": "",
        "libs": [
            {
                "var": "MLMatrix",
                "module": "ml-matrix"
            },
            {
                "var": "mlRandomForest",
                "module": "ml-random-forest"
            }
        ],
        "x": 470,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "90d9e3a8d0446dfc",
        "type": "function",
        "z": "b4fdd94459dced40",
        "name": "train",
        "func": "\nconst { Matrix } = MLMatrix;\nconst { RandomForestClassifier } = mlRandomForest;\n\nconst trainingData = msg.payload;\nlet featuresDataArray = [];\nlet targetDataArray = [];\n\nfor(let i=0; i<trainingData.length;i++){\n    let row = trainingData[i];\n    let rowArray = Object.values(row)\n    let features = []\n    let target;\n    for(let j=0; j<rowArray.length;j++){\n        let data = rowArray[j] \n        if(j==rowArray.length-1)\n            target = data\n        else features.push(data)\n    }\n    featuresDataArray.push(features)\n    targetDataArray.push(target)\n}\n\nconst X = new Matrix(featuresDataArray);\nconst Y = targetDataArray;\n\nconst options = {\n  seed: 3,\n  maxFeatures: 0.8,\n  replacement: true,\n  nEstimators: 25\n};\n\nconst classifier = new RandomForestClassifier(options);\nclassifier.train(X, Y);\n\nflow.set(\"rfClassificationModel\", classifier)\nmsg.payload ={\n    featuresDataArray,\n    targetDataArray\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//import SimpleLinearRegression from 'ml-regression-simple-linear';\n\n",
        "finalize": "",
        "libs": [
            {
                "var": "MLMatrix",
                "module": "ml-matrix"
            },
            {
                "var": "mlRandomForest",
                "module": "ml-random-forest"
            }
        ],
        "x": 390,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "aa4857215b3b5a53",
        "type": "switch",
        "z": "b4fdd94459dced40",
        "name": "",
        "property": "init",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "90d9e3a8d0446dfc"
            ],
            [
                "2d2d761b71c13a42"
            ]
        ]
    },
    {
        "id": "2683f77aab20990d",
        "type": "function",
        "z": "b4fdd94459dced40",
        "name": "calculateStats",
        "func": "\nconst { result, actual} = msg.payload\nlet totalTests = context.get(\"totalTests\");\nlet correctPredictions = context.get(\"correctPredictions\");\n\ntotalTests++;\nif(actual === result){\n     correctPredictions++;\n     let stat = context.get(result+\"Stats\")\n     stat.tp = stat.tp + 1\n     stat.precision = stat.tp/(stat.tp + stat.fp)\n     stat.recall = stat.tp/(stat.tp + stat.fn)\n     stat.fscore = 2*((stat.precision*stat.recall)/(stat.precision + stat.recall))\n     stat.precision = Math.round((stat.precision + Number.EPSILON) * 1000) / 1000\n     stat.recall = Math.round((stat.recall + Number.EPSILON) * 1000) / 1000\n     stat.fscore = Math.round((stat.fscore + Number.EPSILON) * 1000) / 1000\n     context.set(result+\"Stats\", stat)\n}\nelse{\n     let stat1 = context.get(actual+\"Stats\")\n     stat1.fn = stat1.fn + 1\n     let stat2 = context.get(result+\"Stats\")\n     stat2.fp = stat2.fp + 1\n     stat1.precision = stat1.tp/(stat1.tp + stat1.fp)\n     stat1.recall = stat1.tp/(stat1.tp + stat1.fn)\n     stat2.precision = stat2.tp/(stat2.tp + stat2.fp)\n     stat2.recall = stat2.tp/(stat2.tp + stat2.fn)\n     stat1.fscore = 2*((stat1.precision*stat1.recall)/(stat1.precision + stat1.recall))\n     stat2.fscore = 2*((stat2.precision*stat2.recall)/(stat2.precision + stat2.recall))\n     stat1.precision = Math.round((stat1.precision + Number.EPSILON) * 1000) / 1000\n     stat1.recall = Math.round((stat1.recall + Number.EPSILON) * 1000) / 1000\n     stat1.fscore = Math.round((stat1.fscore + Number.EPSILON) * 1000) / 1000\n     stat2.precision = Math.round((stat2.precision + Number.EPSILON) * 1000) / 1000\n     stat2.recall = Math.round((stat2.recall + Number.EPSILON) * 1000) / 1000\n     stat2.fscore = Math.round((stat2.fscore + Number.EPSILON) * 1000) / 1000\n     context.set(actual+\"Stats\", stat1)\n     context.set(result+\"Stats\", stat2)\n}\n\nconst acc = (correctPredictions/totalTests)*100\nconst accuracy = Math.round((acc + Number.EPSILON) * 1000) / 1000\n\ncontext.set(\"correctPredictions\", correctPredictions);\ncontext.set(\"totalTests\", totalTests);\nmsg.payload ={\n    ...msg.payload,\n    accuracy,\n    classStats:{\n    class1: context.get(\"1Stats\"),\n    class2: context.get(\"2Stats\"),\n    class3: context.get(\"3Stats\"),\n    class4: context.get(\"4Stats\")\n    }\n\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"totalTests\", 0);\ncontext.set(\"correctPredictions\", 0);\ncontext.set(\"1Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})\ncontext.set(\"2Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})\ncontext.set(\"3Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})\ncontext.set(\"4Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2d2d761b71c13a42",
        "type": "function",
        "z": "b4fdd94459dced40",
        "name": "runModel",
        "func": "\nconst { Matrix } = MLMatrix;\nconst testData = msg.payload;\nlet featuresDataArray = [];\nlet rowArray = Object.values(testData);\nconst actual = rowArray.pop()\nlet features = [];\n\nfor(let j=0; j<rowArray.length;j++){\n    features.push(rowArray[j])\n}\n\nconst Xtest = new Matrix([features]);\n\nconst classifier = flow.get(\"rfClassificationModel\");\nlet result = \"\"\ntry{\n   let resultData = classifier.predict(Xtest); \n   result = parseInt(resultData[0])\n}catch(e){}\n\nmsg.payload = {\n    algorithm: \"RandomForest\",\n    result,\n    testData,\n    actual\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "LogisticRegression",
                "module": "ml-logistic-regression"
            },
            {
                "var": "MLMatrix",
                "module": "ml-matrix"
            }
        ],
        "x": 300,
        "y": 180,
        "wires": [
            [
                "2683f77aab20990d"
            ]
        ]
    },
    {
        "id": "1ed08c96dea9d621",
        "type": "switch",
        "z": "b4fdd94459dced40",
        "name": "",
        "property": "isclassification",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 300,
        "wires": [
            [
                "aa4857215b3b5a53"
            ],
            [
                "f52fea48342cd315"
            ]
        ]
    },
    {
        "id": "f190b311c94bad4a",
        "type": "comment",
        "z": "b4fdd94459dced40",
        "name": "Classification Flow",
        "info": "",
        "x": 170,
        "y": 60,
        "wires": []
    },
    {
        "id": "d057cde69391d180",
        "type": "comment",
        "z": "b4fdd94459dced40",
        "name": "Regression Flow",
        "info": "",
        "x": 300,
        "y": 360,
        "wires": []
    },
    {
        "id": "9b9886ea365515a2",
        "type": "subflow:0d48d6ca863e9e31",
        "z": "a2f8739eef20117c",
        "name": "",
        "x": 580,
        "y": 440,
        "wires": [
            [
                "9d3695f45eed3411"
            ],
            [
                "9d3695f45eed3411"
            ],
            [
                "9d3695f45eed3411"
            ]
        ]
    },
    {
        "id": "9d3695f45eed3411",
        "type": "subflow:32374ce96bb10d12",
        "z": "a2f8739eef20117c",
        "name": "",
        "x": 920,
        "y": 660,
        "wires": []
    },
    {
        "id": "2a5d627829de1720",
        "type": "function",
        "z": "a2f8739eef20117c",
        "name": "DeleteClassAttr",
        "func": "if(msg.init)\n    return msg;\n\nlet newDataObj = msg.payload;\nlet keys = Object.keys(newDataObj)\ndelete newDataObj[keys[keys.length-1]]\nmsg.payload = newDataObj\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3397414a01bb12a0",
        "type": "subflow:b1942cd0e3fb69cc",
        "z": "a66c82f3cadc8b79",
        "name": "ReadFileData",
        "x": 220,
        "y": 180,
        "wires": [
            [
                "616f26459f9db9aa"
            ]
        ]
    },
    {
        "id": "6e7b57368ad58d0e",
        "type": "function",
        "z": "a66c82f3cadc8b79",
        "name": "splitMLData",
        "func": "//let arrayData = msg.payload;\nif(!Array.isArray(msg.payload))\n    return [msg, msg];\nlet arrayData = msg.payload; //[1, 2, 3, 4, 5, 6, 7, 8];\nlet cutOffPoint = Math.floor(arrayData.length*0.8)\nlet firstArray = arrayData.slice(0, cutOffPoint);\nlet secondArray = arrayData.slice(cutOffPoint);\nlet msg1={...msg}, msg2={};\nmsg1.payload = firstArray;\nmsg2.payload = secondArray;\nreturn [msg1, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "239fd604d456a852"
            ],
            [
                "30b2907edc8ed1e9"
            ]
        ]
    },
    {
        "id": "239fd604d456a852",
        "type": "change",
        "z": "a66c82f3cadc8b79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "init",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "30b2907edc8ed1e9",
        "type": "function",
        "z": "a66c82f3cadc8b79",
        "name": "storeTestData",
        "func": "global.set(\"testData\", msg.payload)\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 280,
        "wires": []
    },
    {
        "id": "616f26459f9db9aa",
        "type": "function",
        "z": "a66c82f3cadc8b79",
        "name": "preprocessData",
        "func": "if(!Array.isArray(msg.payload))\n    return msg;\nlet arrayData = msg.payload; \n\nfor(let i=0; i<arrayData.length;i++){\n    let row = arrayData[i]\n    let keys = Object.keys(row)\n    /*for(let j=0; j<1;j++){\n        delete row[keys[j]]\n    }*/\n    //row[keys[1]] = Date.parse(row[keys[1]])\n    //delete row[keys[0]]\n    //delete row[keys[keys.length-1]]\n}\nmsg.payload = arrayData\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 460,
        "wires": [
            [
                "6e7b57368ad58d0e"
            ]
        ]
    },
    {
        "id": "93ef18d411c368af",
        "type": "function",
        "z": "d022eb2b56d54e12",
        "name": "RunTests",
        "func": "const testData = global.get(\"testData\")\nlet index = flow.get(\"indexData\")\n//testData.length\nif(index == testData.length)\n    return\n    //index=0;\n\nlet dataObj = testData[index]\nvar newDataObj = {};\nfor(var property in dataObj) {\n      newDataObj[property] = dataObj[property];\n}\n//let keys = Object.keys(newDataObj)\n//delete newDataObj[keys[keys.length-1]]\n\nindex++;\nflow.set(\"indexData\", index)\n\nmsg.payload = newDataObj;\nmsg.data_id = index -1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"indexData\",0)",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "ace854d5c23f4448",
        "type": "subflow:a66c82f3cadc8b79",
        "z": "d022eb2b56d54e12",
        "name": "",
        "x": 490,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "8908994348a8c6df",
        "type": "switch",
        "z": "d022eb2b56d54e12",
        "name": "",
        "property": "init",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 160,
        "wires": [
            [
                "ace854d5c23f4448"
            ],
            [
                "f07696aec2febecf"
            ]
        ]
    },
    {
        "id": "8f3664ab827ee4fe",
        "type": "delay",
        "z": "d022eb2b56d54e12",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.4",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 170,
        "y": 540,
        "wires": [
            [
                "93ef18d411c368af"
            ]
        ]
    },
    {
        "id": "f07696aec2febecf",
        "type": "function",
        "z": "d022eb2b56d54e12",
        "name": "generate msgnumber  limit",
        "func": "for(let i=0; i<300;i++){\n   node.send(msg);\n}\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "8f3664ab827ee4fe"
            ]
        ]
    },
    {
        "id": "fdadfbd956995785",
        "type": "subflow:b4fdd94459dced40",
        "z": "0d48d6ca863e9e31",
        "name": "",
        "x": 360,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d8f08977542c48ed",
        "type": "subflow:9566982d40e572b6",
        "z": "0d48d6ca863e9e31",
        "name": "",
        "x": 370,
        "y": 60,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f3c1cd97b8fb5692",
        "type": "subflow:04d97421e9b36a04",
        "z": "0d48d6ca863e9e31",
        "name": "",
        "x": 370,
        "y": 380,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "2c5e89f451460a09",
        "type": "switch",
        "z": "32374ce96bb10d12",
        "name": "",
        "property": "init",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 220,
        "wires": [
            [
                "2eac076dd365aa4b",
                "e5218b6544f2f1c5"
            ],
            [
                "ba33277a4b65acde"
            ]
        ]
    },
    {
        "id": "2eac076dd365aa4b",
        "type": "switch",
        "z": "32374ce96bb10d12",
        "name": "",
        "property": "payload.algorithm",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DecisionTree",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RandomForest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SVM",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 430,
        "y": 220,
        "wires": [
            [
                "98b610e4fd603319"
            ],
            [
                "445c2e294353241a"
            ],
            [
                "e6641fe8dad661ba"
            ]
        ]
    },
    {
        "id": "98b610e4fd603319",
        "type": "function",
        "z": "32374ce96bb10d12",
        "name": "SetTopic",
        "func": "if(msg.init)\n    return msg\nmsg.topic = \"DT\"\nmsg.payload = {\n    result: msg.payload.result,\n    actual: msg.payload.actual,\n    accuracy: msg.payload.accuracy,\n    stats: msg.payload.classStats\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 140,
        "wires": [
            [
                "547498a8476738ba",
                "97fdfb8824926d09",
                "f1c453838fd12a7d",
                "18662a263eb82356"
            ]
        ]
    },
    {
        "id": "445c2e294353241a",
        "type": "function",
        "z": "32374ce96bb10d12",
        "name": "SetTopic",
        "func": "if(msg.init)\n    return msg\nmsg.topic = \"RF\"\nmsg.payload = {\n    result: msg.payload.result,\n    actual: msg.payload.actual,\n    accuracy: msg.payload.accuracy,\n    stats: msg.payload.classStats\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 220,
        "wires": [
            [
                "fb9dbe81e80cba9a",
                "d345892ae481d72c",
                "4163e7adf6a837f1",
                "dc4afb79ee99264c"
            ]
        ]
    },
    {
        "id": "e5218b6544f2f1c5",
        "type": "switch",
        "z": "32374ce96bb10d12",
        "name": "",
        "property": "payload.algorithm",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 480,
        "wires": [
            [
                "b74229e80d4684f1",
                "42ea70fbbcf4243b",
                "060fc4c9f40a42e7",
                "2d40e5a47cd04453",
                "b48d51c11331957b",
                "3a9e77f18963f8cc"
            ],
            []
        ]
    },
    {
        "id": "b74229e80d4684f1",
        "type": "function",
        "z": "32374ce96bb10d12",
        "name": "AddToTable",
        "func": "const data = msg.payload;\nreturn {\"payload\":{\n    \"command\":\"addData\",\n    \"arguments\":[\n        {\n            \"meltTemp\":data.col1,\n            \"moldTemp\":data.col2,\n            \"fillingTime\":data.col3,\n            \"plastTime\":data.col4,\n            \"cycleTime\":data.col5,\n            \"pressure\":data.col6,\n            \"id\":msg.data_id\n        },\n        true\n    ],\n    \"returnPromise\":true\n    }\n}\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 380,
        "wires": [
            [
                "060ff6a390e47554"
            ]
        ]
    },
    {
        "id": "e6641fe8dad661ba",
        "type": "function",
        "z": "32374ce96bb10d12",
        "name": "SetTopic",
        "func": "if(msg.init)\n    return msg\nmsg.topic = \"SVM\"\nmsg.payload = {\n    result: msg.payload.result,\n    actual: msg.payload.actual,\n    accuracy: msg.payload.accuracy,\n    stats: msg.payload.classStats\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 280,
        "wires": [
            [
                "44a83984b027a77d",
                "9f48323529de22ab",
                "311f9a3798d9286d",
                "bc3a0b046cc066bd"
            ]
        ]
    },
    {
        "id": "083ba69d218a0ecd",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "group": "285a4a1d9a259f1c",
        "order": 1,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Real:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 850,
        "y": 580,
        "wires": []
    },
    {
        "id": "42ea70fbbcf4243b",
        "type": "function",
        "z": "32374ce96bb10d12",
        "name": "ExtractClass",
        "func": "let dataObj = msg.payload;\nlet keys = Object.keys(dataObj)\nmsg.payload = dataObj[keys[keys.length-1]]\nmsg.topic = \"real\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 580,
        "wires": [
            [
                "083ba69d218a0ecd"
            ]
        ]
    },
    {
        "id": "ba33277a4b65acde",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "group": "695a5728f1b1bf19",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Trained:",
        "format": "{{msg.init}}",
        "layout": "row-spread",
        "className": "",
        "x": 120,
        "y": 320,
        "wires": []
    },
    {
        "id": "3e78a5e43e6916bb",
        "type": "ui_chart",
        "z": "32374ce96bb10d12",
        "name": "",
        "group": "9b65166c46416877",
        "order": 2,
        "width": 9,
        "height": 5,
        "label": "TempChart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "060fc4c9f40a42e7",
        "type": "function",
        "z": "32374ce96bb10d12",
        "name": "",
        "func": "const data = msg.payload;\nconst msg1 = {\n    topic: \"meltTemp\",\n    payload :data.col2,\n}\nconst msg2 = {\n    topic: \"moldTemp\",\n    payload :data.col3\n}\n\nnode.send(msg1)\nnode.send(msg2);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 440,
        "wires": [
            [
                "3e78a5e43e6916bb"
            ]
        ]
    },
    {
        "id": "e6380dcaf5450944",
        "type": "ui_chart",
        "z": "32374ce96bb10d12",
        "name": "",
        "group": "9b65166c46416877",
        "order": 3,
        "width": 8,
        "height": 5,
        "label": "PressureChart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#00fa00",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "e5d1e370ea2ce660",
        "type": "ui_chart",
        "z": "32374ce96bb10d12",
        "name": "",
        "group": "9b65166c46416877",
        "order": 10,
        "width": 9,
        "height": 5,
        "label": "CycleChart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1d26aa",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "2d40e5a47cd04453",
        "type": "function",
        "z": "32374ce96bb10d12",
        "name": "",
        "func": "const data = msg.payload;\nconst msg1 = {\n    topic: \"pressure\",\n    payload: data.col7\n}\nnode.send(msg1)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 480,
        "wires": [
            [
                "e6380dcaf5450944"
            ]
        ]
    },
    {
        "id": "b48d51c11331957b",
        "type": "function",
        "z": "32374ce96bb10d12",
        "name": "",
        "func": "const data = msg.payload;\nconst msg1 = {\n    topic: \"cycleTime\",\n    payload :data.col6,\n}\nnode.send(msg1)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 520,
        "wires": [
            [
                "e5d1e370ea2ce660"
            ]
        ]
    },
    {
        "id": "547498a8476738ba",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "group": "285a4a1d9a259f1c",
        "order": 5,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "DT",
        "format": "{{msg.payload.result}}",
        "layout": "col-center",
        "className": "",
        "x": 970,
        "y": 20,
        "wires": []
    },
    {
        "id": "fb9dbe81e80cba9a",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "group": "285a4a1d9a259f1c",
        "order": 14,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "RF",
        "format": "{{msg.payload.result}}",
        "layout": "col-center",
        "className": "",
        "x": 1130,
        "y": 200,
        "wires": []
    },
    {
        "id": "44a83984b027a77d",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "group": "285a4a1d9a259f1c",
        "order": 22,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "SVM",
        "format": "{{msg.payload.result}}",
        "layout": "col-center",
        "className": "",
        "x": 1090,
        "y": 360,
        "wires": []
    },
    {
        "id": "060ff6a390e47554",
        "type": "ui_table",
        "z": "32374ce96bb10d12",
        "d": true,
        "group": "9b65166c46416877",
        "name": "Real Time Data",
        "order": 1,
        "width": 9,
        "height": 1,
        "columns": [
            {
                "field": "id",
                "title": "id",
                "width": "10px",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "meltTemp",
                "title": "MeltTemp",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "moldTemp",
                "title": "MoldTemp",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "pressure",
                "title": "Pressure",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "fillingTime",
                "title": "FillingTime",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "plastTime",
                "title": "PlastTime",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "cycleTime",
                "title": "CycleTime",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 700,
        "y": 380,
        "wires": []
    },
    {
        "id": "97fdfb8824926d09",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "group": "285a4a1d9a259f1c",
        "order": 4,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "DTActual",
        "format": "{{msg.payload.actual}}",
        "layout": "col-center",
        "className": "",
        "x": 940,
        "y": 80,
        "wires": []
    },
    {
        "id": "f1c453838fd12a7d",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "group": "285a4a1d9a259f1c",
        "order": 6,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "DTAcc",
        "format": "{{msg.payload.accuracy}}%",
        "layout": "col-center",
        "className": "",
        "x": 970,
        "y": 120,
        "wires": []
    },
    {
        "id": "d345892ae481d72c",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "group": "285a4a1d9a259f1c",
        "order": 13,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "RFActual",
        "format": "{{msg.payload.actual}}",
        "layout": "col-center",
        "className": "",
        "x": 1140,
        "y": 240,
        "wires": []
    },
    {
        "id": "4163e7adf6a837f1",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "group": "285a4a1d9a259f1c",
        "order": 15,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "RFAcc",
        "format": "{{msg.payload.accuracy}}%",
        "layout": "col-center",
        "className": "",
        "x": 1130,
        "y": 280,
        "wires": []
    },
    {
        "id": "9f48323529de22ab",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "group": "285a4a1d9a259f1c",
        "order": 21,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "SVMActual",
        "format": "{{msg.payload.actual}}",
        "layout": "col-center",
        "className": "",
        "x": 1130,
        "y": 420,
        "wires": []
    },
    {
        "id": "311f9a3798d9286d",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "group": "285a4a1d9a259f1c",
        "order": 23,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "SVMAcc",
        "format": "{{msg.payload.accuracy}}%",
        "layout": "col-center",
        "className": "",
        "x": 1120,
        "y": 480,
        "wires": []
    },
    {
        "id": "3a9e77f18963f8cc",
        "type": "function",
        "z": "32374ce96bb10d12",
        "name": "AppendDataID",
        "func": "msg.payload = msg.data_id\nmsg.topic = \"data_id\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 640,
        "wires": [
            [
                "21b139ee3ebc0f5d"
            ]
        ]
    },
    {
        "id": "21b139ee3ebc0f5d",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "group": "285a4a1d9a259f1c",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "DataId:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 860,
        "y": 640,
        "wires": []
    },
    {
        "id": "18662a263eb82356",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "d": true,
        "group": "285a4a1d9a259f1c",
        "order": 9,
        "width": 7,
        "height": 3,
        "name": "",
        "label": "StatsDT",
        "format": "{{msg.payload.stats}}",
        "layout": "col-center",
        "className": "",
        "x": 1020,
        "y": 160,
        "wires": []
    },
    {
        "id": "dc4afb79ee99264c",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "d": true,
        "group": "285a4a1d9a259f1c",
        "order": 17,
        "width": 7,
        "height": 3,
        "name": "",
        "label": "StatsRF",
        "format": "{{msg.payload.stats}}",
        "layout": "col-center",
        "className": "",
        "x": 1180,
        "y": 320,
        "wires": []
    },
    {
        "id": "bc3a0b046cc066bd",
        "type": "ui_text",
        "z": "32374ce96bb10d12",
        "d": true,
        "group": "285a4a1d9a259f1c",
        "order": 25,
        "width": 7,
        "height": 3,
        "name": "",
        "label": "StatsSVM",
        "format": "{{msg.payload.stats}}",
        "layout": "col-center",
        "className": "",
        "x": 1140,
        "y": 520,
        "wires": []
    },
    {
        "id": "3e70225fb0d5d066",
        "type": "switch",
        "z": "04d97421e9b36a04",
        "name": "",
        "property": "init",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 460,
        "wires": [
            [
                "b1168eeeeeb1d5ce"
            ],
            [
                "b8daba2f5fb2a78c"
            ]
        ]
    },
    {
        "id": "b8daba2f5fb2a78c",
        "type": "function",
        "z": "04d97421e9b36a04",
        "name": "runModel",
        "func": "const { Matrix } = MLMatrix;\nconst testData = msg.payload;\nlet featuresDataArray = [];\nlet rowArray = Object.values(testData);\nconst actual = rowArray.pop()\nlet features = [];\nfor(let j=0; j<rowArray.length;j++){\n    features.push(rowArray[j])\n}\n\n//const Ytest = Matrix.columnVector([1]);\nconst regression = flow.get(\"svmRegressionModel\");\nlet result = \"\"\nlet resultData\nlet confidence = flow.get(\"confidence\")\ntry{\n   resultData = regression.predictOneInterval(features,confidence);\n   result = resultData.predicted\n}catch(e){\n    \n}\n\n\nmsg.payload = {\n    algorithm: \"SVM\",\n    result,\n    resultData,\n    actual,\n    testData,\n    features\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "LogisticRegression",
                "module": "ml-logistic-regression"
            },
            {
                "var": "MLMatrix",
                "module": "ml-matrix"
            }
        ],
        "x": 460,
        "y": 480,
        "wires": [
            [
                "3145f57c6db0606a"
            ]
        ]
    },
    {
        "id": "3145f57c6db0606a",
        "type": "function",
        "z": "04d97421e9b36a04",
        "name": "calculateStats",
        "func": "const { result, actual} = msg.payload\nlet totalTests = context.get(\"totalTests\");\nlet pastData = context.get(\"pastData\");\n\npastData.push({actual: actual, result: result})\ntotalTests++;\n\nlet mse = 0\nfor(let i in pastData){\n    const dataRow = pastData[i]\n    mse += Math.pow((dataRow.actual - dataRow.result),2)/totalTests\n}\n\nlet absoluteErrorTotal = 0\nfor(let i in pastData){\n    const dataRow = pastData[i]\n    absoluteErrorTotal += Math.abs(dataRow.actual - dataRow.result)\n}\nconst mae = Math.round(((absoluteErrorTotal/totalTests) + Number.EPSILON) * 1000) / 1000\nconst rmse = Math.round(( Math.sqrt(mse) + Number.EPSILON) * 1000) / 1000\ncontext.set(\"pastData\", pastData);\ncontext.set(\"totalTests\", totalTests);\nmsg.payload ={\n    ...msg.payload,\n    pastData,\n    classStats:{\n       rmse,\n       mae \n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"totalTests\", 0);\ncontext.set(\"pastData\", []);",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "b1168eeeeeb1d5ce",
        "type": "function",
        "z": "04d97421e9b36a04",
        "name": "train",
        "func": "\nconst trainingData = msg.payload;\nlet featuresDataArray = [];\nlet targetDataArray = [];\n\nfor(let i=0; i<trainingData.length;i++){\n    let row = trainingData[i];\n    let rowArray = Object.values(row)\n    let features = []\n    let target =\"\";\n    for(let j=0; j<rowArray.length;j++){\n        let data = rowArray[j] \n        if(j==rowArray.length-1){\n             target = data\n             break\n        }\n        else features.push(data)\n    }\n    \n    featuresDataArray.push(features)\n    targetDataArray.push(target)\n}\n\n const svm = new SVM({\n      kernel: SVM.KERNEL_TYPES.RBF, // The type of kernel I want to use\n     type: SVM.SVM_TYPES.EPSILON_SVR,    // The type of SVM I want to run\n     gamma: 0.00000001,\n     cost:100000,\n     epsilon: 0.00001,\n     probabilityEstimates: true\n});\n\n\nsvm.train(featuresDataArray, targetDataArray);  // train the model\nflow.set(\"svmRegressionModel\", svm)\nflow.set(\"confidence\", 0.8)\nmsg.payload ={\n    featuresDataArray,\n    targetDataArray\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//import SimpleLinearRegression from 'ml-regression-simple-linear';\n\n",
        "finalize": "",
        "libs": [
            {
                "var": "SVM",
                "module": "libsvm-js/asm"
            }
        ],
        "x": 610,
        "y": 380,
        "wires": [
            [
                "0aaee177f23ddf8d"
            ]
        ]
    },
    {
        "id": "4eb8211bff06b551",
        "type": "function",
        "z": "04d97421e9b36a04",
        "name": "train",
        "func": "const trainingData = msg.payload;\nlet featuresDataArray = [];\nlet targetDataArray = [];\n\nfor(let i=0; i<trainingData.length;i++){\n    let row = trainingData[i];\n    let rowArray = Object.values(row)\n    let features = []\n    let target;\n    for(let j=0; j<rowArray.length;j++){\n        let data = rowArray[j] \n        if(j==rowArray.length-1)\n            target = data\n        else features.push(data)\n    }\n    \n    featuresDataArray.push(features)\n    targetDataArray.push(target)\n}\n\nconst svm = new SVM({\n        kernel: SVM.KERNEL_TYPES.RBF, // The type of kernel I want to use\n        type: SVM.SVM_TYPES.C_SVC,    // The type of SVM I want to run\n        gamma: 0.00001,                     // RBF kernel gamma parameter\n        cost: 10000                       // C_SVC cost parameter\n});\n\n\nsvm.train(featuresDataArray, targetDataArray);  // train the model\n\nflow.set(\"svmClassificationModel\", svm)\n\nmsg.payload ={\n    featuresDataArray,\n    targetDataArray\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//import SimpleLinearRegression from 'ml-regression-simple-linear';\n\n",
        "finalize": "",
        "libs": [
            {
                "var": "SVM",
                "module": "libsvm-js/asm"
            }
        ],
        "x": 610,
        "y": 40,
        "wires": [
            [
                "f641d97f5cc92215"
            ]
        ]
    },
    {
        "id": "ededb599957bba34",
        "type": "switch",
        "z": "04d97421e9b36a04",
        "name": "",
        "property": "init",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 100,
        "wires": [
            [
                "4eb8211bff06b551"
            ],
            [
                "43aac3f0394f58b0"
            ]
        ]
    },
    {
        "id": "d03cb4066cda4e3e",
        "type": "function",
        "z": "04d97421e9b36a04",
        "d": true,
        "name": "addTimeData",
        "func": "const {testData, result} = msg.payload;\n//time passed get from testData\n//count of each class\nconst count = context.get(result+\"Count\")\ncontext.set(result+\"Count\", count + 1)\n\nlet currentTime = 0\nfor (var prop in testData) {\n    currentTime = testData[prop]\n    break;\n}\nlet startTime = context.get(\"startTime\")\nif(!startTime){\n   startTime = currentTime \n   context.set(\"startTime\", startTime)\n}\n    \nconst timeDiffInMins = Math.round((currentTime-startTime)/60000)\nmsg.payload = {\n   ...msg.payload,\n   timeData:{\n         timeDiffInMins,\n   timeNow: new Date(currentTime),\n   count:{\n    class1:context.get(\"1Count\"),\n    class2:context.get(\"2Count\"),\n    class3:context.get(\"3Count\"),\n    class4:context.get(\"4Count\")\n   }\n   }\n \n  \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"1Count\",0)\ncontext.set(\"2Count\",0)\ncontext.set(\"3Count\",0)\ncontext.set(\"4Count\",0)",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7a0756937716bc19",
        "type": "function",
        "z": "04d97421e9b36a04",
        "name": "calculateStats",
        "func": "\nconst { result, actual} = msg.payload\nlet totalTests = context.get(\"totalTests\");\nlet correctPredictions = context.get(\"correctPredictions\");\n\ntotalTests++;\nif(actual === result){\n     correctPredictions++;\n     let stat = context.get(result+\"Stats\")\n     stat.tp = stat.tp + 1\n     stat.precision = stat.tp/(stat.tp + stat.fp)\n     stat.recall = stat.tp/(stat.tp + stat.fn)\n     stat.fscore = 2*((stat.precision*stat.recall)/(stat.precision + stat.recall))\n     stat.precision = Math.round((stat.precision + Number.EPSILON) * 1000) / 1000\n     stat.recall = Math.round((stat.recall + Number.EPSILON) * 1000) / 1000\n     stat.fscore = Math.round((stat.fscore + Number.EPSILON) * 1000) / 1000\n     context.set(result+\"Stats\", stat)\n}\nelse{\n     let stat1 = context.get(actual+\"Stats\")\n     stat1.fn = stat1.fn + 1\n     let stat2 = context.get(result+\"Stats\")\n     stat2.fp = stat2.fp + 1\n     stat1.precision = stat1.tp/(stat1.tp + stat1.fp)\n     stat1.recall = stat1.tp/(stat1.tp + stat1.fn)\n     stat2.precision = stat2.tp/(stat2.tp + stat2.fp)\n     stat2.recall = stat2.tp/(stat2.tp + stat2.fn)\n     stat1.fscore = 2*((stat1.precision*stat1.recall)/(stat1.precision + stat1.recall))\n     stat2.fscore = 2*((stat2.precision*stat2.recall)/(stat2.precision + stat2.recall))\n     stat1.precision = Math.round((stat1.precision + Number.EPSILON) * 1000) / 1000\n     stat1.recall = Math.round((stat1.recall + Number.EPSILON) * 1000) / 1000\n     stat1.fscore = Math.round((stat1.fscore + Number.EPSILON) * 1000) / 1000\n     stat2.precision = Math.round((stat2.precision + Number.EPSILON) * 1000) / 1000\n     stat2.recall = Math.round((stat2.recall + Number.EPSILON) * 1000) / 1000\n     stat2.fscore = Math.round((stat2.fscore + Number.EPSILON) * 1000) / 1000\n     context.set(actual+\"Stats\", stat1)\n     context.set(result+\"Stats\", stat2)\n}\n\nconst acc = (correctPredictions/totalTests)*100\nconst accuracy = Math.round((acc + Number.EPSILON) * 1000) / 1000\n\ncontext.set(\"correctPredictions\", correctPredictions);\ncontext.set(\"totalTests\", totalTests);\nmsg.payload ={\n    ...msg.payload,\n    accuracy,\n    classStats:{\n    class1: context.get(\"1Stats\"),\n    class2: context.get(\"2Stats\"),\n    class3: context.get(\"3Stats\"),\n    class4: context.get(\"4Stats\")\n    }\n\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"totalTests\", 0);\ncontext.set(\"correctPredictions\", 0);\ncontext.set(\"1Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})\ncontext.set(\"2Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})\ncontext.set(\"3Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})\ncontext.set(\"4Stats\", {tp: 0, fp:0, fn:0, precision:0, recall:0})",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "43aac3f0394f58b0",
        "type": "function",
        "z": "04d97421e9b36a04",
        "name": "runModel",
        "func": "const { Matrix } = MLMatrix;\nconst testData = msg.payload;\nlet featuresDataArray = [];\nlet rowArray = Object.values(testData);\nconst actual = rowArray.pop()\nlet features = [];\nfor(let j=0; j<rowArray.length;j++){\n    features.push(rowArray[j])\n}\n//const Ytest = Matrix.columnVector([1]);\nconst classifier = flow.get(\"svmClassificationModel\");\nlet result = 0\ntry{\n   result = classifier.predictOne(features); \n}catch(e){\n    \n}\n\nmsg.payload = {\n    algorithm: \"SVM\",\n    actual,\n    testData,\n    result\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "LogisticRegression",
                "module": "ml-logistic-regression"
            },
            {
                "var": "MLMatrix",
                "module": "ml-matrix"
            }
        ],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "7a0756937716bc19"
            ]
        ]
    },
    {
        "id": "5a0e08176fa9da40",
        "type": "switch",
        "z": "04d97421e9b36a04",
        "name": "",
        "property": "isclassification",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 300,
        "wires": [
            [
                "ededb599957bba34"
            ],
            [
                "3e70225fb0d5d066"
            ]
        ]
    },
    {
        "id": "4501e9f2b136b68e",
        "type": "comment",
        "z": "04d97421e9b36a04",
        "name": "Classification Flow",
        "info": "",
        "x": 390,
        "y": 40,
        "wires": []
    },
    {
        "id": "80683bab7b8ddb88",
        "type": "comment",
        "z": "04d97421e9b36a04",
        "name": "Regression Flow",
        "info": "",
        "x": 420,
        "y": 340,
        "wires": []
    },
    {
        "id": "f641d97f5cc92215",
        "type": "debug",
        "z": "04d97421e9b36a04",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 60,
        "wires": []
    },
    {
        "id": "0aaee177f23ddf8d",
        "type": "debug",
        "z": "04d97421e9b36a04",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 320,
        "wires": []
    },
    {
        "id": "aebd38fbbbe91a45",
        "type": "change",
        "z": "c86eb73a2941d666",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "init",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 140,
        "wires": [
            [
                "0ec086cf4a457fca"
            ]
        ]
    },
    {
        "id": "4facead34f5e16dd",
        "type": "subflow:d022eb2b56d54e12",
        "z": "c86eb73a2941d666",
        "name": "Inputs",
        "x": 290,
        "y": 340,
        "wires": [
            [
                "04c2a93bce22abea"
            ]
        ]
    },
    {
        "id": "04c2a93bce22abea",
        "type": "subflow:a2f8739eef20117c",
        "z": "c86eb73a2941d666",
        "name": "EdgeNode",
        "x": 570,
        "y": 340,
        "wires": [
            [
                "9edbd5eae453a693"
            ]
        ]
    },
    {
        "id": "ab5589ea37d8adf0",
        "type": "ui_button",
        "z": "c86eb73a2941d666",
        "name": "",
        "group": "695a5728f1b1bf19",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Train",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 90,
        "y": 140,
        "wires": [
            [
                "aebd38fbbbe91a45"
            ]
        ]
    },
    {
        "id": "e0a4e269ee91f455",
        "type": "ui_button",
        "z": "c86eb73a2941d666",
        "name": "",
        "group": "695a5728f1b1bf19",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Test",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 90,
        "y": 340,
        "wires": [
            [
                "25e105eaaa482be6"
            ]
        ]
    },
    {
        "id": "9edbd5eae453a693",
        "type": "subflow:ea34a77b88c038b0",
        "z": "c86eb73a2941d666",
        "name": "",
        "x": 830,
        "y": 340,
        "wires": []
    },
    {
        "id": "0ec086cf4a457fca",
        "type": "change",
        "z": "c86eb73a2941d666",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "isclassification",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 240,
        "wires": [
            [
                "4facead34f5e16dd"
            ]
        ]
    },
    {
        "id": "25e105eaaa482be6",
        "type": "change",
        "z": "c86eb73a2941d666",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "isclassification",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 480,
        "wires": [
            [
                "4facead34f5e16dd"
            ]
        ]
    }
]